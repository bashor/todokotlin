plugins {
	id 'org.jetbrains.kotlin.multiplatform' version '1.4-M1'/* apply false*/
	id 'kotlinx-serialization' version '1.4-M1'/* apply false*/
}

group 'io.data2viz'
version '1.0-SNAPSHOT'
allprojects {
    repositories {
		jcenter()
		mavenCentral()
		maven { url "https://kotlin.bintray.com/kotlin-eap/" }
		maven { url "https://kotlin.bintray.com/kotlin-dev/" }
		maven { url "https://plugins.gradle.org/m2/" }
    }
}

// Report Kotlin compiler version when building project
println("Using Kotlin compiler version: $org.jetbrains.kotlin.config.KotlinCompilerVersion.VERSION")


//apply plugin: 'kotlinx-serialization'
//apply plugin: 'kotlin-dce-js'
//apply plugin: 'com.moowork.node'
apply plugin: 'application'


kotlin {

	jvm {
		withJava()
		compilations.main {
			kotlinOptions {
				jvmTarget = "1.8"
			}
		}
		compilations.test {
			kotlinOptions {
				jvmTarget = "1.8"
			}
		}
	}
	js {
		browser {}
		produceExecutable()
		compilations.main{
			kotlinOptions {
				freeCompilerArgs += ["-XXLanguage:+InlineClasses"]
			}
		}
	}

	sourceSets {

		jvmMain {
			dependencies {
				implementation kotlin('stdlib-jdk8')
				implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
				implementation "io.ktor:ktor-client-apache:$ktor_version"
				implementation "io.ktor:ktor-jackson:$ktor_version"
				implementation "io.ktor:ktor-html-builder:$ktor_version"
				implementation "io.ktor:ktor-locations:$ktor_version"
				implementation "io.ktor:ktor-server-netty:$ktor_version"
				implementation("io.ktor:ktor-server-sessions:$ktor_version")
				implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:$kotlinx_html_version"
				implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlin_serializable_version"
				implementation "ch.qos.logback:logback-classic:$logback_version"
			}
		}

		jvmTest {
			dependencies {
				implementation "io.mockk:mockk:1.9.3"
				implementation 'com.google.truth:truth:0.35'
				implementation 'org.hamcrest:java-hamcrest:2.0.0.0'
				implementation "io.ktor:ktor-server-test-host:$ktor_version"
			}
		}

		jsMain {
			dependencies {
				implementation kotlin('stdlib-js')

				implementation "org.jetbrains.kotlinx:kotlinx-html-js:$kotlinx_html_version"
				implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$kotlin_serializable_version"
				implementation "io.ktor:ktor-client-js:$ktor_version"

//				implementation "org.jetbrains.kotlinx:kotlinx-html-js:$kotlinx_html_version@klib"
//				implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$kotlin_serializable_version@klib"
//				implementation "io.ktor:ktor-client-js:$ktor_version@klib"
//				implementation "io.ktor:ktor-io-js:$ktor_version@klib"
//				implementation "io.ktor:ktor-utils-js:$ktor_version@klib"
//				implementation "io.ktor:ktor-http-js:$ktor_version@klib"
//				implementation "io.ktor:ktor-http-cio-js:$ktor_version@klib"
//				implementation "io.ktor:ktor-client-core-js:$ktor_version@klib"
//				implementation "org.jetbrains.kotlinx:atomicfu-js:$kotlinx_atomicfu@klib"
//				implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$kotlinx_coroutines_version@klib"

				implementation npm("abort-controller", "3.0.0")
				implementation npm("text-encoding", "0.7.0")
			}
		}

		jsTest {
			dependencies {
				implementation "org.jetbrains.kotlin:kotlin-test-js"
			}

		}


		commonMain {
			dependencies {
				implementation kotlin('stdlib-common')
				implementation "org.jetbrains.kotlinx:kotlinx-html:$kotlinx_html_version"
				implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$kotlin_serializable_version"

			}
		}
		commonTest {
			dependencies {
				implementation kotlin('test-common')
				implementation kotlin('test-annotations-common')
			}
		}
	}

}

//runDceJsKotlin {
//	dceOptions{
//		devMode = false
//		outputDirectory = "data/public"
//	}
//}
//runDceJsTestKotlin {
//	dceOptions{
//		devMode = true
//		outputDirectory = "node_modules"
//	}
//}

//node {
//	version = "$node_version"
//	npmVersion = "$npm_version"
//	download = true
//}

//task installDependencies(type: YarnTask) {
//	args = ['install']
//}

//task prepareMocha(dependsOn: [jsTestClasses, runDceJsTestKotlin, installDependencies])

//task runJsTests(type: YarnTask, dependsOn: prepareMocha) {
//	args = ['test']
//}


mainClassName="io.ktor.server.netty.EngineMain"

if (distJar.toBoolean()) {

	apply plugin: "com.github.johnrengelman.shadow"

	shadowJar {
		baseName = 'play.data2viz.io'
		classifier = null
		version = null
	}
}

//build.dependsOn(runDceJsKotlin)
//run.dependsOn(build)


if (false) {

	apply plugin: 'com.moowork.node'

	task yarnInstall(type: YarnTask) {
		args = ['install']
	}

	task bundle(type: YarnTask, dependsOn: [runDceKotlinJs, yarnInstall]) {
		args = ["run", "bundle"]
	}

	runDceKotlinJs.keep "js.io.data2viz.todo.main"
//} else {
//	runDceKotlinJs.dceOptions.devMode = true
}

////// Dev server

task devServerResources(type: Copy) {
	destinationDir = new File(project.buildDir, "dev-resources")
	from kotlin.sourceSets.jvmMain.resources
	filter { line -> line.replaceAll('port = 8080', 'port = 8081') }
}

task prepareDevServer {
	dependsOn "compileKotlinJvm"
	dependsOn "devServerResources"
}

task devServer(type: JavaExec) {
	dependsOn "prepareDevServer"

	classpath = project.files(
			configurations.jvmRuntimeClasspath,
			new File(project.buildDir, "classes/kotlin/jvm/main"),
			new File(project.buildDir, "dev-resources")
	)
	main = 'io.ktor.server.netty.EngineMain'
}

jsBrowserRun {
	afterEvaluate {
		dependsOn prepareDevServer
	}
}

///////////////

